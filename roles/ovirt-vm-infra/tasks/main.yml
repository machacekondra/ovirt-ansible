---
- block:
  - name: Login to oVirt
    ovirt_auth:
      url: "{{ engine_url }}"
      username: "{{ engine_user }}"
      password: "{{ engine_password }}"
      ca_file: "{{ engine_cafile | default(omit) }}"
      insecure: "{{ engine_insecure | default(true) }}"
    when: ovirt_auth is undefined
    register: loggedin

  - name: Create VMs
    no_log: "{{ not debug_vm_create }}"
    ovirt_vms:
      auth: "{{ ovirt_auth }}"
      state: "{{ item.profile.state | default(omit) }}"
      name: "{{ item.name }}"
      cluster: "{{ item.profile.cluster | default(omit) }}"
      template: "{{ item.profile.template | default(omit) }}"
      memory: "{{ item.profile.memory | default(omit) }}"
      cpu_cores: "{{ item.profile.cores | default(omit) }}"
      memory_guaranteed: "{{ item.profile.memory_guaranteed | default(omit) }}"
      cpu_sockets: "{{ item.profile.sockets | default(omit) }}"
      high_availability: "{{ item.profile.high_availability | default(omit) }}"
      storage_domain: "{{ item.profile.storage_domain | default(omit) }}"
      cloud_init:
        host_name: "{{ item.name }}.{{ item.profile.domain | default(omit) }}"
        authorized_ssh_keys: "{{ item.profile.ssh_key | default('') }}"
        user_name: root
        root_password: "{{ item.profile.root_password | default(omit) }}"
      cloud_init_nics: "{{ item.profile.cloud_init_nics | default(omit) }}"
    with_items:
      - "{{ vms }}"
    changed_when: false
    async: 800
    poll: 0
    register: all_vms
  
  - name: Wait for VMs to be added
    async_status: "jid={{ item.ansible_job_id }}"
    register: job_result
    with_items:
      - "{{ all_vms.results }}"
    until: job_result.finished
    retries: 40
    delay: 20

  - name: Create VMs NICs
    ovirt_nics:
      auth: "{{ ovirt_auth }}"
      vm: "{{ item.0.name }}"
      name: "{{ item.1.name | default(omit) }}"
      interface: "{{ item.1.interface | default(omit) }}"
      mac_address: "{{ item.1.mac_address | default(omit) }}"
      profile: "{{ item.1.profile | default(omit) }}"
      network: "{{ item.1.network | default(omit) }}" 
    with_subelements:
      - "{{ vms }}"
      - profile.nics
      - flags:
        skip_missing: True

  - name: Create VMs disks
    ovirt_disks:
      auth: "{{ ovirt_auth }}"
      name: "{{ item.0.name }}_{{ item.1.name }}"
      vm_name: "{{ item.0.name }}"
      size: "{{ item.1.size | default(omit) }}"
      format: "{{ item.1.format | default('cow') }}"
      interface: "{{ item.1.interface | default(omit) }}"
      bootable: "{{ item.1.bootable | default(omit) }}"
      storage_domain: "{{ item.1.storage_domain | default(omit) }}"
    with_subelements:
      - "{{ vms }}"
      - profile.disks
      - flags:
        skip_missing: True
  
  - name: Tag VMs
    ovirt_tags:
      auth: "{{ ovirt_auth }}"
      name: "{{ item }}"
      vms: "{{ vms|json_query(query)|map(attribute='name') | list }}"
    when: "item != '[Undefined]'" # If not specified tag for VM ignore.
    with_items:
      - "{{ vms | map(attribute='tag') | list | unique }}"
    vars:
      query: "[?tag=='{{ item }}']"

  - name: Apply any Affinity Groups
    include_role:
      name: ovirt-affinity-groups
  
  - name: Wait for VMs IP
    ovirt_vms_facts:
      auth: "{{ ovirt_auth }}"
      pattern: "name={{ item.name }}"
      fetch_nested: true
      nested_attributes: ips
    with_items:
      - "{{ vms }}"
    until: ovirt_vms | map(attribute='reported_devices') | list | first | length > 0
    retries: 5
    delay: 5
    when:
      - "wait_for_ip"
      - "item.profile.state != 'stopped'"

  always:
    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      when: not loggedin.skipped | default(false)
